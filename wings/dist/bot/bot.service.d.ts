import * as TelegramBot from 'node-telegram-bot-api';
import { DatabaseService } from 'src/database/database.service';
import { Prisma } from '@prisma/client';
import { FlightSearchService } from 'src/flight-search/flight-search.service';
export declare class BotService {
    private readonly databaseService;
    private readonly flightSearchService;
    private readonly wingBot;
    private logger;
    constructor(databaseService: DatabaseService, flightSearchService: FlightSearchService);
    onReceiveMessage: (msg: any) => Promise<void | TelegramBot.Message>;
    handleUserTextInputs: (msg: any, session: any) => Promise<TelegramBot.Message>;
    handleButtonCommand: (query: any) => Promise<boolean | void | TelegramBot.Message>;
    welcomeMessageLayout: (chat_id: any, userName: any) => Promise<void>;
    sendAllCountries: (chat_id: any, changeDisplay?: any) => Promise<void>;
    saveToDB(saveUserDto: Prisma.UserCreateInput): Promise<{
        id: number;
        username: string;
        chat_id: bigint;
        language: string;
        country: string;
        currency: string;
        createdAt: Date;
        updatedAt: Date;
    }>;
    defaultMenuLyout: (chat_id: any) => Promise<void>;
    searchFlightLayout: (chatId: any) => Promise<TelegramBot.Message>;
    sendPremiumDealLayout: (chatId: any) => Promise<TelegramBot.Message>;
    createSearchSession(chat_id: number, saveSessionDto: Prisma.SessionCreateInput): Promise<{
        id: number;
        departureCity: string;
        destinationCity: string;
        departureDate: string;
        returnDate: string;
        departureCityPromptId: string;
        userAnswerId: string;
        departureCityCode: string;
        destinationCityCode: string;
        destinationCityPromptId: string;
        departureDatePromptId: string;
        returnDatePromptId: string;
        multicitySearchData: string;
        bookingMarkdownId: bigint;
        language: string;
        one_way_search_state: boolean;
        return_search_state: boolean;
        multi_city_search_state: boolean;
        chat_id: bigint;
    } | Prisma.BatchPayload>;
    updateUserSession(chat_id: number, updateUserSessionDto: Prisma.SessionUpdateInput): Promise<Prisma.BatchPayload>;
    searchFlight: (chatId: any, type: any) => Promise<TelegramBot.Message>;
    departureCitySelection: (chatId: any) => Promise<void>;
    destinationCitySelection: (chatId: any) => Promise<void>;
    departureDateSelection: (chatId: any) => Promise<void>;
    returnDateSelection: (chatId: any) => Promise<void>;
    createBookingSession(chat_id: number, BookingSessionDto: Prisma.BookingSessionCreateInput): Promise<{
        id: number;
        firstName: string;
        LastName: string;
        email: string;
        nationality: string;
        gender: string;
        passPortNumber: string;
        DOB: string;
        searchResultId: string;
        firstNamePromptId: string;
        userAnswerId: string;
        lastNamePromptId: string;
        emailPromptId: string;
        nationalityPromptId: string;
        genderPromptId: string;
        passPortNumberPromptId: string;
        DOBPromptId: string;
        bookingDetailMarkdownId: string;
        language: string;
        chat_id: bigint;
        Solref: string;
        USDCref: string;
        Bonkref: string;
        amount: string;
        Solamount: string;
        USDCamount: string;
        Bonkamount: string;
        recipient: string;
        message: string;
        Soldeeplink: string;
        USDCdeeplink: string;
        Bonkdeeplink: string;
    } | Prisma.BatchPayload>;
    updateBookingSession(chat_id: number, updateBookingSessionDto: Prisma.BookingSessionUpdateInput): Promise<Prisma.BatchPayload>;
    displayFlights: (chatId: any, language: any, type: any, flights: any) => Promise<TelegramBot.Message>;
    displayBookingDetails: (chatId: any, language: any, bookingDetailsDbId: any) => Promise<TelegramBot.Message>;
    bookingDetailsFirstNameSelection: (chatId: any) => Promise<void>;
    bookingDetailsLastNameSelection: (chatId: any) => Promise<void>;
    bookingDetailsEmailSelection: (chatId: any) => Promise<void>;
    verifyUser: (chatId: any) => Promise<void>;
}
